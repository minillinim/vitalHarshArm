#!/usr/bin/python
###############################################################################
#                                                                             #
#    vitalharsharm                                                            #
#                                                                             #
#    Entry point. See vitalharsharm/vitalharsharm.py for internals            #
#                                                                             #
#    Copyright (C) Michael Imelfort                                           #
#                                                                             #
###############################################################################
#                                                                             #
#        888     888 d8b 888    888                 d8888 8888888b.           #  
#        888     888 Y8P 888    888                d88888 888   Y88b          #
#        888     888     888    888               d88P888 888    888          #
#        Y88b   d88P 888 8888888888  8888b.      d88P 888 888   d88P          #
#         Y88b d88P  888 888    888     "88b    d88P  888 8888888P"           #
#          Y88o88P   888 888    888 .d888888   d88P   888 888 T88b            #
#           Y888P    888 888    888 888  888  d8888888888 888  T88b           #
#            Y8P     888 888    888 "Y888888 d88P     888 888   T88b          #
#                                                                             #
###############################################################################
#                                                                             #
#    This program is free software: you can redistribute it and/or modify     #
#    it under the terms of the GNU General Public License as published by     #
#    the Free Software Foundation, either version 3 of the License, or        #
#    (at your option) any later version.                                      #
#                                                                             #
#    This program is distributed in the hope that it will be useful,          #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
#    GNU General Public License for more details.                             #
#                                                                             #
#    You should have received a copy of the GNU General Public License        #
#    along with this program. If not, see <http://www.gnu.org/licenses/>.     #
#                                                                             #
###############################################################################

__author__ = "Michael Imelfort"
__copyright__ = "Copyright 2012"
__credits__ = ["Michael Imelfort"]
__license__ = "GPL3"
__version__ = "0.0.1"
__maintainer__ = "Michael Imelfort"
__email__ = "mike@mikeimelfort.com"
__status__ = "Alpha"

###############################################################################

import argparse
import sys
import re
from vitalharsharm import vitalHarshArm

###############################################################################
###############################################################################
###############################################################################
###############################################################################

def printHelp():
    print '''\
    
            ...::: vitalHarshArm :::...      

       Making memory rad C++ classes for kix

 VHA template overview:

    You should include all class templates in ONE template file. VHA will
    produce a set of .cpp and .h files which you can copy into your project
    directory. You should NOT modify these files by hand. Instead they should
    be wrapped and accessed via that wrapper. 

 Template fields:
   
    You can specify any number of fields for each class and VHA will produce
    appropriate get and set routines. Routines automatically provided are:
   
    int      : signed integer             : Get Set Increment Decrement Reset
    uint     : unsigned integer           : Get Set Increment Decrement Reset
    pointer  : pointer to tclass instance : Get Set Clear
    data     : binary data container      : Get Set Clear
    flag     : boolean flag               : Is Set Clear
    
 Template format:
     
    Templates are written in JSON format (so no comments!). Class templates
    include a mix of compulsory and optional sections.

 {
     "classes" : [
        {
            ...
             "className"   : "String",                       // Name of the class
             "idName"      : "String",                       // Instance Id type name
             <"parent"     : "None|String",>                 // Parent class, controls memory
             <"templated"  : "True|False",>                  // Class uses C++ templates
             <"deleteable" : "True|False",>                  // Instances can be deleted
             <"active"     : "True|False",>                  // Use this template
             "fields"      : [                               // Class fields
                 {
                     "f0" : "int,7,name,comment",            // 7 bit signed int at pos 0
                     "f1" : "flag,1,name,comment",
                     "f2" : "pointer,0,className,comment",
                     "f3" : "uint,24,name,comment"          // 24 bit unsigned int at pos 41
                     ...
                 }
             ]
         }
     ]
 }    '''

if __name__ == '__main__':

    #-------------------------------------------------
    # intialise the options parser
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     description='Making memory rad C++ classes for kix')
    parser.add_argument('template', help="template file for the classes")
    parser.add_argument('-f', '--folder', default='stdout', help="folder to write to")
    parser.add_argument('-s', '--silent', action="store_true", default=False, help="run with no progress messages")
        
    #-------------------------------------------------
    # get and check options
    args = None
    if(len(sys.argv) == 1 or sys.argv[1] == '-h' or sys.argv == '--help'):
        printHelp()
        sys.exit(0)
    else:
        args = parser.parse_args()

    #-------------------------------------------------
    # do what we came here to do
    try:
        VHA_parser = vitalHarshArm.VHAOptionsParser()
        if(False):
            import cProfile
            cProfile.run('GM_parser.parseOptions(args)', 'prof')
            ##########################################
            ##########################################
            # Use this in python console!
            #import pstats
            #p = pstats.Stats('prof')
            #p.sort_stats('cumulative').print_stats(10)
            #p.sort_stats('time').print_stats(10)
            ##########################################
            ##########################################            
        else:        
            VHA_parser.parseOptions(args)
    except:
        print "Unexpected error:", sys.exc_info()[0]
        raise
    
###############################################################################
###############################################################################
###############################################################################
###############################################################################
